name: CI — Ren'Py build (Linux + Windows)

permissions:
  contents: write
  issues: write

on:
  push:
    branches: [ main, 'feature/**' ]
  pull_request:
    branches: [ main ]

env:
  SDK_VERSION: '8.4.1'

jobs:
  build-linux:
    name: Build (linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java (optional)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'

      - id: cache-linux
        name: Restore Ren'Py SDK cache
        uses: actions/cache@v4
        with:
          path: renpy-sdk
          key: ${{ runner.os }}-renpy-${{ env.SDK_VERSION }}
          restore-keys: |
            ${{ runner.os }}-renpy-

      - name: Download and extract Ren'Py SDK (if cache miss)
        if: steps.cache-linux.outputs.cache-hit != 'true'
        run: |
          SDK_URL="https://www.renpy.org/dl/${{ env.SDK_VERSION }}/renpy-${{ env.SDK_VERSION }}-sdk.tar.bz2"
          curl -L "$SDK_URL" -o renpy-sdk.tar.bz2
          mkdir renpy-sdk
          tar -xjf renpy-sdk.tar.bz2 -C renpy-sdk --strip-components=1
          
        - name: SDK contents (diagnostic)
          run: |
            echo "Ren'Py SDK top-level contents:"; ls -la renpy-sdk || true
            echo "SDK renpy.sh present:"; test -f renpy-sdk/renpy.sh && echo yes || echo no

      - name: Run headless build (Linux)
        working-directory: renpy-sdk
        run: |
          PROJECT_DIR="${{ github.workspace }}"
            echo "Running renpy --version"; ./renpy.sh --version || true
            echo "Invoking headless build"; ./renpy.sh build "$PROJECT_DIR"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: renpy-dist
          path: renpy-sdk/dist/**

      - name: List dist
        run: ls -la renpy-sdk/dist || true

  build-windows:
    name: Build (windows)
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: cache-windows
        name: Restore Ren'Py SDK cache
        uses: actions/cache@v4
        with:
          path: renpy-sdk
          key: ${{ runner.os }}-renpy-${{ env.SDK_VERSION }}
          restore-keys: |
            ${{ runner.os }}-renpy-

      - name: Download and extract Ren'Py SDK (if cache miss)
        if: steps.cache-windows.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $url = "https://www.renpy.org/dl/${{ env.SDK_VERSION }}/renpy-${{ env.SDK_VERSION }}-sdk.zip"
          Invoke-WebRequest -Uri $url -OutFile renpy-sdk.zip
          New-Item -ItemType Directory -Path renpy-sdk | Out-Null
          Expand-Archive -Path renpy-sdk.zip -DestinationPath renpy-sdk
          # Ren'Py zip may contain a top-level folder, move contents up if needed
          $entries = Get-ChildItem renpy-sdk
          if ($entries.Count -eq 1 -and $entries[0].PSIsContainer) {
            Move-Item -Path (Join-Path renpy-sdk $entries[0].Name)\* -Destination renpy-sdk
          }
          
        - name: SDK contents (diagnostic)
          shell: pwsh
          run: |
            Write-Output "Ren'Py SDK top-level contents:"; Get-ChildItem renpy-sdk -Force
            Write-Output "Is renpy.exe present?"; if (Test-Path renpy-sdk\renpy.exe) { Write-Output 'yes' } else { Write-Output 'no' }

      - name: Run headless build (Windows)
        shell: pwsh
        run: |
          $project = "${{ github.workspace }}"
            $renpy = Join-Path $PWD 'renpy-sdk' 'renpy.exe'
            Write-Output "Attempting renpy.exe --version"; & $renpy --version || Write-Output 'version-check-failed'
            Write-Output "Invoking headless build"; & $renpy build $project

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: renpy-dist
          path: renpy-sdk/dist/**

      - name: List dist
        shell: pwsh
        run: Get-ChildItem -Recurse -Force renpy-sdk\dist || Exit 0

  publish:
    name: Publish Release (on success)
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: renpy-dist
          path: artifacts

      - name: Create GitHub Release and upload artifacts
        uses: ncipollo/release-action@v1
        with:
          tag: build-${{ github.run_number }}
          name: CI build #${{ github.run_number }}
          body: |
            Automated CI build
            Ref: ${{ github.ref }}
            Commit: ${{ github.sha }}
          files: artifacts/**
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify on failure
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    steps:
      - name: Create an issue for failed CI
        uses: actions/github-script@v6
        with:
          script: |
            const title = `CI build failed for ${{ github.ref }} (run #${{ github.run_number }})`;
            const body = `One or more CI jobs failed.\n\nWorkflow: ${{ github.workflow }}\nRun: ${{ github.run_number }}\nCommit: ${{ github.sha }}\n- linux job: ${{ needs['build-linux'].result }}\n- windows job: ${{ needs['build-windows'].result }}\n\nSee the Actions tab for logs.`;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body
            });
name: ci-sanity-unique-20250918

on: [push]

jobs:
  noop:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4
      - name: Print marker
        run: echo "CI sanity marker: 7f3b1a"
name: CI — Ren'Py build (Linux + Windows)

on:
  push:
    branches: [ main, 'feature/**' ]
  pull_request:
    branches: [ main ]

env:
  SDK_VERSION: '8.4.1'

jobs:
  build-linux:
    name: Build (linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java (optional)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'

      - id: cache-linux
        name: Restore Ren'Py SDK cache
        uses: actions/cache@v4
        with:
          path: renpy-sdk
          key: ${{ runner.os }}-renpy-${{ env.SDK_VERSION }}
          restore-keys: |
            ${{ runner.os }}-renpy-

      - name: Download and extract Ren'Py SDK (if cache miss)
        if: steps.cache-linux.outputs.cache-hit != 'true'
        run: |
          SDK_URL="https://www.renpy.org/dl/${{ env.SDK_VERSION }}/renpy-${{ env.SDK_VERSION }}-sdk.tar.bz2"
          curl -L "$SDK_URL" -o renpy-sdk.tar.bz2
          mkdir renpy-sdk
          tar -xjf renpy-sdk.tar.bz2 -C renpy-sdk --strip-components=1

      - name: Run headless build (Linux)
        working-directory: renpy-sdk
        run: |
          PROJECT_DIR="${{ github.workspace }}"
          ./renpy.sh build "$PROJECT_DIR"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: renpy-dist
          path: renpy-sdk/dist/**

      - name: List dist
        run: ls -la renpy-sdk/dist || true

  build-windows:
    name: Build (windows)
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: cache-windows
        name: Restore Ren'Py SDK cache
        uses: actions/cache@v4
        with:
          path: renpy-sdk
          key: ${{ runner.os }}-renpy-${{ env.SDK_VERSION }}
          restore-keys: |
            ${{ runner.os }}-renpy-

      - name: Download and extract Ren'Py SDK (if cache miss)
        if: steps.cache-windows.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $url = "https://www.renpy.org/dl/${{ env.SDK_VERSION }}/renpy-${{ env.SDK_VERSION }}-sdk.zip"
          Invoke-WebRequest -Uri $url -OutFile renpy-sdk.zip
          New-Item -ItemType Directory -Path renpy-sdk | Out-Null
          Expand-Archive -Path renpy-sdk.zip -DestinationPath renpy-sdk
          # Ren'Py zip may contain a top-level folder, move contents up if needed
          $entries = Get-ChildItem renpy-sdk
          if ($entries.Count -eq 1 -and $entries[0].PSIsContainer) {
            Move-Item -Path (Join-Path renpy-sdk $entries[0].Name)\* -Destination renpy-sdk
          }

      - name: Run headless build (Windows)
        shell: pwsh
        run: |
          $project = "${{ github.workspace }}"
          $renpy = Join-Path $PWD 'renpy-sdk' 'renpy.exe'
          & $renpy build $project

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: renpy-dist
          path: renpy-sdk/dist/**

      - name: List dist
        shell: pwsh
        run: Get-ChildItem -Recurse -Force renpy-sdk\dist || Exit 0

  publish:
    name: Publish Release (on success)
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: renpy-dist
          path: artifacts

      - name: Create GitHub Release and upload artifacts
        uses: ncipollo/release-action@v1
        with:
          tag: build-${{ github.run_number }}
          name: CI build #${{ github.run_number }}
          body: |
            Automated CI build
            Ref: ${{ github.ref }}
            Commit: ${{ github.sha }}
          files: artifacts/**

  notify:
    name: Notify on failure
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    steps:
      - name: Create an issue for failed CI
        uses: actions/github-script@v6
        with:
          script: |
            const title = `CI build failed for ${{ github.ref }} (run #${{ github.run_number }})`;
            const body = `One or more CI jobs failed.\n\nWorkflow: ${{ github.workflow }}\nRun: ${{ github.run_number }}\nCommit: ${{ github.sha }}\n- linux job: ${{ needs['build-linux'].result }}\n- windows job: ${{ needs['build-windows'].result }}\n\nSee the Actions tab for logs.`;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body
            });
name: CI — Ren'Py build (Linux + Windows)

on:
  push:
    branches: [ main, 'feature/**' ]
  pull_request:
    branches: [ main ]

env:
  SDK_VERSION: '8.4.1'

jobs:
  build-linux:
    name: Build (linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java (optional)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'

      - id: cache-linux
        name: Restore Ren'Py SDK cache
        uses: actions/cache@v4
        with:
          path: renpy-sdk
          key: ${{ runner.os }}-renpy-${{ env.SDK_VERSION }}
          restore-keys: |
            ${{ runner.os }}-renpy-

      - name: Download and extract Ren'Py SDK (if cache miss)
        if: steps.cache-linux.outputs.cache-hit != 'true'
        run: |
          SDK_URL="https://www.renpy.org/dl/${{ env.SDK_VERSION }}/renpy-${{ env.SDK_VERSION }}-sdk.tar.bz2"
          curl -L "$SDK_URL" -o renpy-sdk.tar.bz2
          mkdir renpy-sdk
          tar -xjf renpy-sdk.tar.bz2 -C renpy-sdk --strip-components=1

      - name: Run headless build (Linux)
        working-directory: renpy-sdk
        run: |
          PROJECT_DIR="${{ github.workspace }}"
          ./renpy.sh build "$PROJECT_DIR"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: renpy-dist
          path: renpy-sdk/dist/**

      - name: List dist
        run: ls -la renpy-sdk/dist || true

  build-windows:
    name: Build (windows)
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: cache-windows
        name: Restore Ren'Py SDK cache
        uses: actions/cache@v4
        with:
          path: renpy-sdk
          key: ${{ runner.os }}-renpy-${{ env.SDK_VERSION }}
          restore-keys: |
            ${{ runner.os }}-renpy-

      - name: Download and extract Ren'Py SDK (if cache miss)
        if: steps.cache-windows.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          $url = "https://www.renpy.org/dl/${{ env.SDK_VERSION }}/renpy-${{ env.SDK_VERSION }}-sdk.zip"
          Invoke-WebRequest -Uri $url -OutFile renpy-sdk.zip
          New-Item -ItemType Directory -Path renpy-sdk | Out-Null
          Expand-Archive -Path renpy-sdk.zip -DestinationPath renpy-sdk
          # Ren'Py zip may contain a top-level folder, move contents up if needed
          $entries = Get-ChildItem renpy-sdk
          if ($entries.Count -eq 1 -and $entries[0].PSIsContainer) {
            Move-Item -Path (Join-Path renpy-sdk $entries[0].Name)\* -Destination renpy-sdk
          }

      - name: Run headless build (Windows)
        shell: pwsh
        run: |
          $project = "${{ github.workspace }}"
          $renpy = Join-Path $PWD 'renpy-sdk' 'renpy.exe'
          & $renpy build $project

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: renpy-dist
          path: renpy-sdk/dist/**

      - name: List dist
        shell: pwsh
        run: Get-ChildItem -Recurse -Force renpy-sdk\dist || Exit 0

  publish:
    name: Publish Release (on success)
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: renpy-dist
          path: artifacts

      - name: Create GitHub Release and upload artifacts
        uses: ncipollo/release-action@v1
        with:
          tag: build-${{ github.run_number }}
          name: CI build #${{ github.run_number }}
          body: |
            Automated CI build
            Ref: ${{ github.ref }}
            Commit: ${{ github.sha }}
          files: artifacts/**

  notify:
    name: Notify on failure
    needs: [build-linux, build-windows]
    runs-on: ubuntu-latest
    if: ${{ failure() }}
    steps:
      - name: Create an issue for failed CI
        uses: actions/github-script@v6
        with:
          script: |
            const title = `CI build failed for ${{ github.ref }} (run #${{ github.run_number }})`;
            const body = `One or more CI jobs failed.\n\nWorkflow: ${{ github.workflow }}\nRun: ${{ github.run_number }}\nCommit: ${{ github.sha }}\n- linux job: ${{ needs['build-linux'].result }}\n- windows job: ${{ needs['build-windows'].result }}\n\nSee the Actions tab for logs.`;
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body
            });
name: CI — Ren'Py build (Linux + Windows)
name: CI — Ren'Py build (Linux + Windows)

on:
  push:
    branches: [ main, 'feature/**' ]
  pull_request:
    branches: [ main ]

env:
  SDK_VERSION: '8.4.1'

jobs:
  build-linux:
    name: Build (linux)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java (optional)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: '11'

      - id: cache-linux
        name: Restore Ren'Py SDK cache
        uses: actions/cache@v4
        with:
          path: renpy-sdk
          key: ${{ runner.os }}-renpy-${{ env.SDK_VERSION }}
          restore-keys: |
            ${{ runner.os }}-renpy-

      - name: Download and extract Ren'Py SDK (if cache miss)
        if: steps.cache-linux.outputs.cache-hit != 'true'
        run: |
          SDK_URL="https://www.renpy.org/dl/${{ env.SDK_VERSION }}/renpy-${{ env.SDK_VERSION }}-sdk.tar.bz2"
          curl -L "$SDK_URL" -o renpy-sdk.tar.bz2
          mkdir renpy-sdk
          tar -xjf renpy-sdk.tar.bz2 -C renpy-sdk --strip-components=1

      - name: Run headless build (Linux)
        working-directory: renpy-sdk
        run: |
          PROJECT_DIR="${{ github.workspace }}"
          ./renpy.sh build "$PROJECT_DIR"

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: renpy-dist
          path: renpy-sdk/dist/**

      - name: List dist
        run: ls -la renpy-sdk/dist || true

  build-windows:
    name: Build (windows)
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - id: cache-windows
        name: Restore Ren'Py SDK cache
        uses: actions/cache@v4
        with:
          path: renpy-sdk
          key: ${{ runner.os }}-renpy-${{ env.SDK_VERSION }}
          restore-keys: |
            ${{ runner.os }}-renpy-

      - name: Download and extract Ren'Py SDK (if cache miss)
        name: CI — Ren'Py build (Linux + Windows)

        on:
          push:
            branches: [ main, 'feature/**' ]
          pull_request:
            branches: [ main ]

        env:
          SDK_VERSION: '8.4.1'

        jobs:
          build-linux:
            name: Build (linux)
            runs-on: ubuntu-latest
            steps:
              - name: Checkout repository
                uses: actions/checkout@v4

              - name: Set up Java (optional)
                uses: actions/setup-java@v4
                with:
                  distribution: temurin
                  java-version: '11'

              - id: cache-linux
                name: Restore Ren'Py SDK cache
                uses: actions/cache@v4
                with:
                  path: renpy-sdk
                  key: ${{ runner.os }}-renpy-${{ env.SDK_VERSION }}
                  restore-keys: |
                    ${{ runner.os }}-renpy-

              - name: Download and extract Ren'Py SDK (if cache miss)
                if: steps.cache-linux.outputs.cache-hit != 'true'
                run: |
                  SDK_URL="https://www.renpy.org/dl/${{ env.SDK_VERSION }}/renpy-${{ env.SDK_VERSION }}-sdk.tar.bz2"
                  curl -L "$SDK_URL" -o renpy-sdk.tar.bz2
                  mkdir renpy-sdk
                  tar -xjf renpy-sdk.tar.bz2 -C renpy-sdk --strip-components=1

              - name: Run headless build (Linux)
                working-directory: renpy-sdk
                run: |
                  PROJECT_DIR="${{ github.workspace }}"
                  ./renpy.sh build "$PROJECT_DIR"

              - name: Upload build artifacts
                uses: actions/upload-artifact@v4
                with:
                  name: renpy-dist
                  path: renpy-sdk/dist/**

              - name: List dist
                run: ls -la renpy-sdk/dist || true

          build-windows:
            name: Build (windows)
            runs-on: windows-latest
            steps:
              - name: Checkout repository
                uses: actions/checkout@v4

              - id: cache-windows
                name: Restore Ren'Py SDK cache
                uses: actions/cache@v4
                with:
                  path: renpy-sdk
                  key: ${{ runner.os }}-renpy-${{ env.SDK_VERSION }}
                  restore-keys: |
                    ${{ runner.os }}-renpy-

              - name: Download and extract Ren'Py SDK (if cache miss)
                name: CI — Ren'Py build (Linux + Windows)

                on:
                  push:
                    branches: [ main, 'feature/**' ]
                  pull_request:
                    branches: [ main ]

                env:
                  SDK_VERSION: '8.4.1'

                jobs:
                  build-linux:
                    name: Build (linux)
                    runs-on: ubuntu-latest
                    steps:
                      - name: Checkout repository
                        uses: actions/checkout@v4

                      - name: Set up Java (optional)
                        uses: actions/setup-java@v4
                        with:
                          distribution: temurin
                          java-version: '11'

                      - id: cache-linux
                        name: Restore Ren'Py SDK cache
                        uses: actions/cache@v4
                        with:
                          path: renpy-sdk
                          key: ${{ runner.os }}-renpy-${{ env.SDK_VERSION }}
                          restore-keys: |
                            ${{ runner.os }}-renpy-

                      - name: Download and extract Ren'Py SDK (if cache miss)
                        if: steps.cache-linux.outputs.cache-hit != 'true'
                        run: |
                          SDK_URL="https://www.renpy.org/dl/${{ env.SDK_VERSION }}/renpy-${{ env.SDK_VERSION }}-sdk.tar.bz2"
                          curl -L "$SDK_URL" -o renpy-sdk.tar.bz2
                          mkdir renpy-sdk
                          tar -xjf renpy-sdk.tar.bz2 -C renpy-sdk --strip-components=1

                      - name: Run headless build (Linux)
                        working-directory: renpy-sdk
                        run: |
                          PROJECT_DIR="${{ github.workspace }}"
                          ./renpy.sh build "$PROJECT_DIR"

                      - name: Upload build artifacts
                        uses: actions/upload-artifact@v4
                        with:
                          name: renpy-dist
                          path: renpy-sdk/dist/**

                      - name: List dist
                        run: ls -la renpy-sdk/dist || true

                  build-windows:
                    name: Build (windows)
                    runs-on: windows-latest
                    steps:
                      - name: Checkout repository
                        uses: actions/checkout@v4

                      - id: cache-windows
                        name: Restore Ren'Py SDK cache
                        uses: actions/cache@v4
                        with:
                          path: renpy-sdk
                          key: ${{ runner.os }}-renpy-${{ env.SDK_VERSION }}
                          restore-keys: |
                            ${{ runner.os }}-renpy-

                      - name: Download and extract Ren'Py SDK (if cache miss)
                        if: steps.cache-windows.outputs.cache-hit != 'true'
                        shell: pwsh
                        run: |
                          $url = "https://www.renpy.org/dl/${{ env.SDK_VERSION }}/renpy-${{ env.SDK_VERSION }}-sdk.zip"
                          Invoke-WebRequest -Uri $url -OutFile renpy-sdk.zip
                          New-Item -ItemType Directory -Path renpy-sdk | Out-Null
                          Expand-Archive -Path renpy-sdk.zip -DestinationPath renpy-sdk
                          # Ren'Py zip may contain a top-level folder, move contents up if needed
                          $entries = Get-ChildItem renpy-sdk
                          if ($entries.Count -eq 1 -and $entries[0].PSIsContainer) {
                            Move-Item -Path (Join-Path renpy-sdk $entries[0].Name)\* -Destination renpy-sdk
                          }

                      - name: Run headless build (Windows)
                        shell: pwsh
                        run: |
                          $project = "${{ github.workspace }}"
                          $renpy = Join-Path $PWD 'renpy-sdk' 'renpy.exe'
                          & $renpy build $project

                      - name: Upload build artifacts
                        uses: actions/upload-artifact@v4
                        with:
                          name: renpy-dist
                          path: renpy-sdk/dist/**

                      - name: List dist
                        shell: pwsh
                        run: Get-ChildItem -Recurse -Force renpy-sdk\dist || Exit 0

                  publish:
                    name: Publish Release (on success)
                    needs: [build-linux, build-windows]
                    runs-on: ubuntu-latest
                    if: ${{ success() }}
                    steps:
                      - name: Download build artifacts
                        uses: actions/download-artifact@v4
                        with:
                          name: renpy-dist
                          path: artifacts

                      - name: Create GitHub Release and upload artifacts
                        uses: ncipollo/release-action@v1
                        with:
                          tag: build-${{ github.run_number }}
                          name: CI build #${{ github.run_number }}
                          body: |
                            Automated CI build
                            Ref: ${{ github.ref }}
                            Commit: ${{ github.sha }}
                          files: artifacts/**

                  notify:
                    name: Notify on failure
                    needs: [build-linux, build-windows]
                    runs-on: ubuntu-latest
                    if: ${{ failure() }}
                    steps:
                      - name: Create an issue for failed CI
                        uses: actions/github-script@v6
                        with:
                          script: |
                            const title = `CI build failed for ${{ github.ref }} (run #${{ github.run_number }})`;
                            const body = `One or more CI jobs failed.\n\nWorkflow: ${{ github.workflow }}\nRun: ${{ github.run_number }}\nCommit: ${{ github.sha }}\n- linux job: ${{ needs['build-linux'].result }}\n- windows job: ${{ needs['build-windows'].result }}\n\nSee the Actions tab for logs.`;
                            await github.rest.issues.create({
                              owner: context.repo.owner,
                              repo: context.repo.repo,
                              title,
                              body
                            });
